class Weiyunsuan //位运算  做运算的时候最快的运算是位运算
{
	public static void main(String[] args)
	{
		//  3<<2 = 12; 以2进制左移两位  3* 2^2 = 12
		// 6>>2 = 1   0110->0001
		// -6>>2  1111-1111 1111-1111 1111-1111 1111-1010 -->1111-1111 1111-1111 1111-1111 1111-1110  就是-1
		// -6>>>2 1111-1111 1111-1111 1111-1111 1111-1010 -->0011-1111 1111-1111 1111-1111 1111-1110

		//&与也能做成位运算符  110 & 011 = 010 就是6 & 3 = 2 要转换成2进制计算
		System.out.println(6&3);

		//用最有效率的方法算出2*8
	//	2<<3  // 位运算

		//互换两个数的位置
//1.通过第三方变量
		int a = 3, b = 5;
		int val;

		System.out.println("a="+a+",b="+b);

		val = a;
		a = b;
		b = val;
		System.out.println("a="+a+",b="+b);
//2.不用第三方变量
		// 11 = 3 + 8;
		// 3 = 11 - 8;
		// 8 = 11 - 3;
		//相对于
		// n = n + m;  // 如果n和m的值非常大，容易超出int范围
		// m = n - m;
		// n = n - m;	
//3.用异或来写
		// n = n ^ m;
		// m = n ^ m;  // (n^m)^m= n
		// n = n ^ m;  // (n^m)^n= m  		
	}
}